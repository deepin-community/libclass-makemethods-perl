Description: spelling fixes in the POD
Origin: vendor
Author: gregor herrmann <gregoa@debian.org>
Last-Update: 2016-06-10

--- a/MakeMethods.pm
+++ b/MakeMethods.pm
@@ -687,7 +687,7 @@
 Standard::Array provide object constructor and accessors. The
 Standard::Global provides for static data shared by all instances
 and subclasses, while the data for Standard::Inheritable methods
-trace the inheritance tree to find values, and can be overriden
+trace the inheritance tree to find values, and can be overridden
 for any subclass or instance.
 
 =item Composite (See L<Class::MakeMethods::Composite>.)
@@ -703,7 +703,7 @@
 and Composite::Array provide object constructor and accessors. The
 Composite::Global provides for static data shared by all instances
 and subclasses, while the data for Composite::Inheritable methods
-can be overriden for any subclass or instance.
+can be overridden for any subclass or instance.
 
 =item Template (See L<Class::MakeMethods::Template>.)
 
@@ -1274,7 +1274,7 @@
 
 =head2 Creating A Subclass
 
-The begining of a typical extension might look like the below:
+The beginning of a typical extension might look like the below:
 
   package My::UpperCaseMethods;
   use strict;
@@ -1301,7 +1301,7 @@
 of the same name. You can give your meta-method type any name that
 is a legal subroutine identifier.
 
-(Names begining with an underscore, and the names C<import> and
+(Names beginning with an underscore, and the names C<import> and
 C<make>, are reserved for internal use by Class::MakeMethods.)
 
 If you plan on distributing your extension, you may wish to follow
--- a/MakeMethods/Autoload.pm
+++ b/MakeMethods/Autoload.pm
@@ -165,7 +165,7 @@
 
 =item Construction of %s method %s failed to produce usable method
 
-Indicates that Autoload succesfully called Class::MakeMethods->make
+Indicates that Autoload successfully called Class::MakeMethods->make
 to generate the requested method, but afterwards was not able to
 invoke the generated method. You may have selected an incompatible
 method type, or the method may not have been installed sucesfully.
--- a/MakeMethods/Composite/Array.pm
+++ b/MakeMethods/Composite/Array.pm
@@ -647,7 +647,7 @@
   # Retrieve value by key
   print $obj->baz('foo');
   
-  # Retrive slice of values by position
+  # Retrieve slice of values by position
   print join(', ', $obj->baz( ['foo', 'bar'] ) );
   
   # Direct access to referenced hash
--- a/MakeMethods/Composite/Global.pm
+++ b/MakeMethods/Composite/Global.pm
@@ -446,7 +446,7 @@
   # Retrieve value by key
   print MyClass->baz('foo');
   
-  # Retrive slice of values by position
+  # Retrieve slice of values by position
   print join(', ', MyClass->baz( ['foo', 'bar'] ) );
   
   # Direct access to referenced hash
--- a/MakeMethods/Composite/Hash.pm
+++ b/MakeMethods/Composite/Hash.pm
@@ -572,7 +572,7 @@
   # Retrieve value by key
   print $obj->baz('foo');
   
-  # Retrive slice of values by position
+  # Retrieve slice of values by position
   print join(', ', $obj->baz( ['foo', 'bar'] ) );
   
   # Direct access to referenced hash
--- a/MakeMethods/Composite/Inheritable.pm
+++ b/MakeMethods/Composite/Inheritable.pm
@@ -407,7 +407,7 @@
   # Retrieve value by key
   print MyClass->baz('foo');
   
-  # Retrive slice of values by position
+  # Retrieve slice of values by position
   print join(', ', MyClass->baz( ['foo', 'bar'] ) );
   
   # Direct access to referenced hash
--- a/MakeMethods/Docs/Changes.pod
+++ b/MakeMethods/Docs/Changes.pod
@@ -158,7 +158,7 @@
 
 Added Autoload interface.
 
-Modifed Attribute interface to add "inheritable" default logic for
+Modified Attribute interface to add "inheritable" default logic for
 Maker class parameter. (Suggested by Malcolm Cook.)
 
 Fixed typo in documentation for Standard::Universal. (Spotted by
@@ -447,7 +447,7 @@
 =item v1.000.8 - 2001/01/19
 
 Following receipt of a suggestion to fork from the maintainer of
-Class::MethodMaker, renamed packge from Class::MethodMaker v2.0 to
+Class::MethodMaker, renamed package from Class::MethodMaker v2.0 to
 Class::Methods v1.000.
 
 Adjusted documentation to reflect fork, although additional cleanup
--- a/MakeMethods/Docs/ReadMe.pod
+++ b/MakeMethods/Docs/ReadMe.pod
@@ -116,7 +116,7 @@
 
 =head2 Tested Platforms
 
-This release has been tested succesfully on the following platforms:
+This release has been tested successfully on the following platforms:
 
   5.6.1 on darwin
 
@@ -155,7 +155,7 @@
 
 This module has been used in a variety of production systems and
 has been available on CPAN for over two years, with several other
-distributions dependant on it, so it would be fair to say that it
+distributions dependent on it, so it would be fair to say that it
 is fully released. 
 
 However, while the commonly-used portions are well tested, some of
--- a/MakeMethods/Emulator/Inheritable.pm
+++ b/MakeMethods/Emulator/Inheritable.pm
@@ -58,14 +58,14 @@
 
 =head1 DESCRIPTION
 
-This module is an adaptor that provides emulatation of Class::Data::Inheritable by invoking similiar functionality provided by Class::MakeMethods::ClassInherit.
+This module is an adaptor that provides emulatation of Class::Data::Inheritable by invoking similar functionality provided by Class::MakeMethods::ClassInherit.
 
 The public interface provided by Class::MakeMethods::Emulator::Inheritable is identical to that of Class::Data::Inheritable. 
 
 Class::Data::Inheritable is for creating accessor/mutators to class
 data.  That is, if you want to store something about your class as a
 whole (instead of about a single object).  This data is then inherited
-by your subclasses and can be overriden.
+by your subclasses and can be overridden.
 
 =head1 USAGE
 
@@ -134,7 +134,7 @@
 
 However, should Raygun decide to set its own Suitcase() it has now
 "overridden" Pere::Ubu and is on its own, just like if it had
-overriden a method:
+overridden a method:
 
   # Raygun has an orange suitcase, Pere::Ubu's is still Blue.
   Raygun->Suitcase('Orange');
--- a/MakeMethods/Emulator/MethodMaker.pm
+++ b/MakeMethods/Emulator/MethodMaker.pm
@@ -77,7 +77,7 @@
 
 Direct Access
 
-Replace occurances in your code of C<Class::MethodMaker> with C<Class::MakeMethods::Emulator::MethodMaker>.
+Replace occurrences in your code of C<Class::MethodMaker> with C<Class::MakeMethods::Emulator::MethodMaker>.
 
 =item *
 
--- a/MakeMethods/Standard/Array.pm
+++ b/MakeMethods/Standard/Array.pm
@@ -410,7 +410,7 @@
   # Retrieve value by key
   print $obj->baz('foo');
   
-  # Retrive slice of values by position
+  # Retrieve slice of values by position
   print join(', ', $obj->baz( ['foo', 'bar'] ) );
   
   # Direct access to referenced hash
--- a/MakeMethods/Standard/Global.pm
+++ b/MakeMethods/Standard/Global.pm
@@ -277,7 +277,7 @@
   # Retrieve value by key
   print MyClass->baz('foo');
   
-  # Retrive slice of values by position
+  # Retrieve slice of values by position
   print join(', ', MyClass->baz( ['foo', 'bar'] ) );
   
   # Direct access to referenced hash
--- a/MakeMethods/Standard/Hash.pm
+++ b/MakeMethods/Standard/Hash.pm
@@ -367,7 +367,7 @@
   # Retrieve value by key
   print $obj->baz('foo');
   
-  # Retrive slice of values by position
+  # Retrieve slice of values by position
   print join(', ', $obj->baz( ['foo', 'bar'] ) );
   
   # Direct access to referenced hash
--- a/MakeMethods/Standard/Inheritable.pm
+++ b/MakeMethods/Standard/Inheritable.pm
@@ -313,7 +313,7 @@
   # Retrieve value by key
   print MyClass->baz('foo');
   
-  # Retrive slice of values by position
+  # Retrieve slice of values by position
   print join(', ', MyClass->baz( ['foo', 'bar'] ) );
   
   # Direct access to referenced hash
--- a/MakeMethods/Standard/Universal.pm
+++ b/MakeMethods/Standard/Universal.pm
@@ -98,7 +98,7 @@
 =back
 
 This is intended to support the use of abstract methods, that must
-be overidden in a useful subclass.
+be overridden in a useful subclass.
 
 If each subclass is expected to provide an implementation of a given method, using this abstract method will replace the generic error message below with the clearer, more explicit error message that follows it:
 
@@ -284,7 +284,7 @@
 
 =back
 
-You might want to create and use such methods to faciliate composition of objects from smaller objects.
+You might want to create and use such methods to facilitate composition of objects from smaller objects.
 
 Sample declaration and usage:
 
--- a/MakeMethods/Template.pm
+++ b/MakeMethods/Template.pm
@@ -1053,7 +1053,7 @@
 
 Each template may include a set of default parameters for all declarations as C<params =E<gt> I<hash_ref>>.
 
-Template-default parameters can be overrridden by interface '-params', described below, and and method-specific parameters, described above.
+Template-default parameters can be overridden by interface '-params', described below, and and method-specific parameters, described above.
 
 =head2 Defining Interfaces
 
@@ -1081,7 +1081,7 @@
 by InsideOut meta-methods.
 
 In addition to the name-to-behavior correspondences described above,
-interfaces may also contain additional entries with keys begining
+interfaces may also contain additional entries with keys beginning
 with the '-' character which are interpreted as follows:
 
 =over 4
@@ -1114,7 +1114,7 @@
 interface can be overridden by providing a new value, or a name
 can be removed by mapping it to undef or the empty string.
 
-Example: The following defines a get-set meta-method h, but supresses
+Example: The following defines a get-set meta-method h, but suppresses
 the clear_h method:
 
   use Class::MakeMethods::Template::Hash
--- a/MakeMethods/Template/ClassName.pm
+++ b/MakeMethods/Template/ClassName.pm
@@ -57,7 +57,7 @@
 
 =item *
 
-if its a a package within the namespace of the original: the distingushing name within that namespace, without leading C<::>
+if its a a package within the namespace of the original: the distinguishing name within that namespace, without leading C<::>
 
 =item *
 
@@ -202,7 +202,7 @@
 Takes a single string or a reference to an array of strings as its argument. 
 For each string, creates a new anonymous hash and associated accessor methods 
 that will map scalar values to classes in the calling package's subclass 
-hiearchy.
+hierarchy.
 
 The accessor methods provide an interface to the hash as illustrated below. 
 Note that several of these functions operate quite differently depending on the 
@@ -232,7 +232,7 @@
 
 =item @all_classes = $class_or_ref->unique_x_values;
 
-Returns a list of the classes associated with this registry, with no more than one occurance of any value.
+Returns a list of the classes associated with this registry, with no more than one occurrence of any value.
 
 =item %mapping = $class_or_ref->x_hash;
 
--- a/MakeMethods/Template/Universal.pm
+++ b/MakeMethods/Template/Universal.pm
@@ -218,7 +218,7 @@
   );
 
 This is intended to support the use of abstract methods, that must
-be overidden in a useful subclass.
+be overridden in a useful subclass.
 
 If each subclass is expected to provide an implementation of a given method, using this abstract method will replace the generic error message below with the clearer, more explicit error message that follows it:
 
--- a/MakeMethods/Utility/Inheritable.pm
+++ b/MakeMethods/Utility/Inheritable.pm
@@ -38,7 +38,7 @@
 
 This module provides several functions which allow you to store values in a hash corresponding to both objects and classes, and to retrieve those values by searching a object's inheritance tree until it finds a matching entry.
 
-This functionality is used by Class::MakeMethods::Standard::Inheritable and Class::MakeMethods::Composite::Inheritable to construct methods that can both store class data and be overriden on a per-object level.
+This functionality is used by Class::MakeMethods::Standard::Inheritable and Class::MakeMethods::Composite::Inheritable to construct methods that can both store class data and be overridden on a per-object level.
 
 =cut
 
--- a/MakeMethods/Utility/TextBuilder.pm
+++ b/MakeMethods/Utility/TextBuilder.pm
@@ -128,7 +128,7 @@
 
 After any initial string and code-ref rules have been applied, the hash of substitution rules are applied.
 
-The text will be searched for occurances of the keys of the substitution hash, which will be modified based on the corresponding value in the hash. If the substitution key ends with '{}', the search will also match a balanced block of braces, and that value will also be used in the substitution.
+The text will be searched for occurrences of the keys of the substitution hash, which will be modified based on the corresponding value in the hash. If the substitution key ends with '{}', the search will also match a balanced block of braces, and that value will also be used in the substitution.
 
 The hash-ref may contain the following types of rules:
 
@@ -138,31 +138,31 @@
 
 'string' => 'string'
 
-Occurances of the first string are to be replaced by the second.
+Occurrences of the first string are to be replaced by the second.
 
 =item *
 
 'string' => I<code_ref>
 
-Occurances of the string are to be replaced by the results of calling the subroutine with no arguments.
+Occurrences of the string are to be replaced by the results of calling the subroutine with no arguments.
 
 =item *
 
 'string{}' => 'string'
 
-Occurances of the first string and subsequent block of braces are replaced by a copy of the second string in which any '*' characters have first been replaced by the contents of the brace block. 
+Occurrences of the first string and subsequent block of braces are replaced by a copy of the second string in which any '*' characters have first been replaced by the contents of the brace block.
 
 =item *
 
 'string{}' => I<code_ref>
 
-Occurances of the string and subsequent block of braces are replaced by the results of calling the subroutine with the contents of the brace block as its only argument. 
+Occurrences of the string and subsequent block of braces are replaced by the results of calling the subroutine with the contents of the brace block as its only argument.
 
 =item *
 
 'string{}' => I<hash_ref>
 
-Occurances of the string and subsequent block of braces are replaced by using the contents of the brace block as a key into the provided hash-ref.
+Occurrences of the string and subsequent block of braces are replaced by using the contents of the brace block as a key into the provided hash-ref.
 
 =back
 
--- a/README
+++ b/README
@@ -84,7 +84,7 @@
 
   Tested Platforms
 
-    This release has been tested succesfully on the following platforms:
+    This release has been tested successfully on the following platforms:
 
       5.6.1 on darwin
 
--- a/tests/xemulator/class_inheritable/emulate.t
+++ b/tests/xemulator/class_inheritable/emulate.t
@@ -74,7 +74,7 @@
 ::ok( Suitcase->Ubu('Pere'));
 ::ok( Suitcase->can('_Ubu_accessor') );
 
-# Test that superclasses don't effect overriden children.
+# Test that superclasses don't effect overridden children.
 Ray->Ubu('Squonk');
 ::ok( Ray->Ubu eq 'Squonk');
 ::ok( Gun->Ubu eq 'Pere');
--- a/tests/xemulator/class_inheritable/transparent.t
+++ b/tests/xemulator/class_inheritable/transparent.t
@@ -74,7 +74,7 @@
 ::ok( Suitcase->Ubu('Pere'));
 ::ok( Suitcase->can('_Ubu_accessor') );
 
-# Test that superclasses don't effect overriden children.
+# Test that superclasses don't effect overridden children.
 Ray->Ubu('Squonk');
 ::ok( Ray->Ubu eq 'Squonk');
 ::ok( Gun->Ubu eq 'Pere');
